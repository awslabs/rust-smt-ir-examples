(declare-const actionName String)
(declare-const p0.allows Bool)
(declare-const p0.neutral Bool)
(declare-const p1.0.action Bool)
(declare-const new_var0 Bool)
(declare-const p1.0.condition Bool)
(declare-const new_var1 Bool)
(declare-const p1.0.resource Bool)
(declare-const new_var2 Bool)
(declare-const p1.0.statement.allow Bool)
(declare-const p1.denies Bool)
(declare-const p1.allows Bool)
(declare-const p1.neutral Bool)
(declare-const new_var3 (RegEx String))
(declare-const new_var4 (RegEx String))
(declare-const new_var5 (RegEx String))
(declare-const new_var6 (RegEx String))
(declare-const new_var7 (RegEx String))
(declare-const new_var8 Bool)
(declare-const new_var9 (RegEx String))
(declare-const new_var10 (RegEx String))
(declare-const new_var11 (RegEx String))
(declare-const new_var12 (RegEx String))
(declare-const new_var13 (RegEx String))
(declare-const new_var14 Bool)
(declare-const new_var15 (RegEx String))
(declare-const new_var16 Bool)
(assert (= new_var0 (= "getobject" actionName)))
(assert (= new_var1 (str.prefixof "http://www.example1.com/" |aws:referer|)))
(assert (= new_var2 (str.prefixof "examplebucket/" resource_resource)))
(assert (= new_var3 (re.range "a" "z")))
(assert (= new_var4 (re.range "0" "9")))
(assert (= new_var5 (str.to.re "-")))
(assert (= new_var6 (re.union new_var3 new_var4 new_var5)))
(assert (= new_var7 (re.* new_var6)))
(assert (= new_var8 (str.in.re resource_service new_var7)))
(assert (= new_var9 (str.to.re "")))
(assert (= new_var10 (re.loop new_var4 12 12)))
(assert (= new_var11 (str.to.re "aws")))
(assert (= new_var12 (str.to.re "cloudfront")))
(assert (= new_var13 (re.union new_var9 new_var10 new_var11 new_var12)))
(assert (= new_var14 (str.in.re resource_account new_var13)))
(assert (= new_var15 (re.union new_var11 new_var12)))
(assert (= new_var16 (str.in.re resource_account new_var15)))
(assert (= p0.allows p0.0.statement.allow))
(assert (= p0.neutral (not p0.0.statement.allow)))
(assert (= p1.0.action (and (= "s3" actionNamespace) new_var0)))
(assert (= p1.0.condition (and |aws:referer_exists| new_var1)))
(assert (= p1.0.resource (and (= "arn" resource_prefix) (= "aws" resource_partition) (= "s3" resource_service) (= "" resource_region) (= "" resource_account) new_var2)))
(assert (= p1.0.statement.allow (and p1.0.action p1.0.condition p1.0.resource)))
(assert (not p1.denies))
(assert (= p1.allows p1.0.statement.allow))
(assert (= p1.neutral (not p1.0.statement.allow)))
(assert (= "arn" resource_prefix))
(assert (or (and (= "aws" resource_partition) (= "ap-east-1" resource_region)) (and (= "aws" resource_partition) (= "" resource_region)) (and (= "aws" resource_partition) (= "ap-northeast-1" resource_region)) (and (= "aws" resource_partition) (= "ap-northeast-2" resource_region)) (and (= "aws" resource_partition) (= "ap-northeast-3" resource_region)) (and (= "aws" resource_partition) (= "ap-south-1" resource_region)) (and (= "aws" resource_partition) (= "ap-southeast-1" resource_region)) (and (= "aws" resource_partition) (= "ap-southeast-2" resource_region)) (and (= "aws" resource_partition) (= "ca-central-1" resource_region)) (and (= "aws" resource_partition) (= "eu-central-1" resource_region)) (and (= "aws" resource_partition) (= "eu-north-1" resource_region)) (and (= "aws" resource_partition) (= "eu-west-1" resource_region)) (and (= "aws" resource_partition) (= "eu-west-2" resource_region)) (and (= "aws" resource_partition) (= "eu-west-3" resource_region)) (and (= "aws" resource_partition) (= "me-south-1" resource_region)) (and (= "aws" resource_partition) (= "sa-east-1" resource_region)) (and (= "aws" resource_partition) (= "us-east-1" resource_region)) (and (= "aws" resource_partition) (= "us-east-2" resource_region)) (and (= "aws" resource_partition) (= "us-west-1" resource_region)) (and (= "aws" resource_partition) (= "us-west-2" resource_region))))
(assert new_var8)
(assert new_var14)
(assert (=> new_var16 (= resource_service "iam")))
(assert p0.allows)
(assert (not p1.allows))
(check-sat)
(get-model)
