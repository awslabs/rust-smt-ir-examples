(declare-const arnvar String)
(declare-const arnvar_exists Bool)
(declare-const resource String)
(declare-const p0.0.condition Bool)
(declare-const new_var0 (RegEx String))
(declare-const new_var1 (RegEx String))
(declare-const new_var2 (RegEx String))
(declare-const new_var3 (RegEx String))
(declare-const new_var4 (RegEx String))
(declare-const new_var5 (RegEx String))
(declare-const new_var6 (RegEx String))
(declare-const new_var7 (RegEx String))
(declare-const new_var8 (RegEx String))
(declare-const new_var9 (RegEx String))
(declare-const new_var10 (RegEx String))
(declare-const new_var11 (RegEx String))
(declare-const new_var12 (RegEx String))
(declare-const new_var13 (RegEx String))
(declare-const new_var14 (RegEx String))
(declare-const new_var15 (RegEx String))
(declare-const new_var16 (RegEx String))
(declare-const new_var17 (RegEx String))
(declare-const new_var18 (RegEx String))
(declare-const new_var19 (RegEx String))
(declare-const new_var20 (RegEx String))
(declare-const new_var21 (RegEx String))
(declare-const new_var22 (RegEx String))
(declare-const new_var23 (RegEx String))
(declare-const new_var24 (RegEx String))
(declare-const new_var25 Bool)
(declare-const p1.0.principal Bool)
(declare-const p1.0.condition Bool)
(declare-const new_var26 (RegEx String))
(declare-const new_var27 (RegEx String))
(declare-const new_var28 Bool)
(assert (= new_var0 (str.to.re "\u{b}\u{1c}\u{18}%\u{b}!\u{1d}%")))
(assert (= new_var1 (re.range "\u{b}" "$")))
(assert (= new_var2 (re.range "\u{1}" "\n")))
(assert (= new_var3 (str.to.re "&")))
(assert (= new_var4 (re.union new_var1 new_var2 new_var3)))
(assert (= new_var5 (re.* new_var4)))
(assert (= new_var6 (str.to.re "\u{16}\u{b}\u{17}\u{c}\u{e}\u{b}")))
(assert (= new_var7 (re.inter new_var5 new_var6)))
(assert (= new_var8 (str.to.re "%")))
(assert (= new_var9 (str.to.re "")))
(assert (= new_var10 (str.to.re "\u{1f}\u{1d}&!\u{f}\u{1d}\u{1e}&\u{3}")))
(assert (= new_var11 (re.union new_var9 new_var10)))
(assert (= new_var12 (str.to.re "\u{1f}\u{1d}&")))
(assert (= new_var13 (re.* re.allchar)))
(assert (= new_var14 (re.++ new_var12 new_var13)))
(assert (= new_var15 (re.inter new_var11 new_var14)))
(assert (= new_var16 (re.loop new_var2 12 12)))
(assert (= new_var17 (str.to.re "\u{b}!\u{1d}")))
(assert (= new_var18 (str.to.re "\r\u{16}\u{19}\u{1f}\u{e}\u{10}\u{1c}\u{19}\u{18}\u{1e}")))
(assert (= new_var19 (re.union new_var9 new_var16 new_var17 new_var18)))
(assert (= new_var20 (str.to.re "\u{1}\u{2}\u{3}\u{4}\u{5}\u{6}\u{7}\u{8}\t\n\u{1}\u{2}")))
(assert (= new_var21 (re.inter new_var19 new_var20)))
(assert (= new_var22 (str.to.re "\u{10}\u{1f}\u{18}\r\u{1e}\u{13}\u{19}\u{18}")))
(assert (= new_var23 (re.++ new_var22 new_var13)))
(assert (= new_var24 (re.++ new_var0 new_var7 new_var8 new_var15 new_var8 new_var21 new_var8 new_var23)))
(assert (= new_var25 (str.in.re arnvar new_var24)))
(assert (= new_var26 (str.to.re "%\u{10}\u{1f}\u{18}\r\u{1e}\u{13}\u{19}\u{18}")))
(assert (= new_var27 (re.++ new_var0 new_var7 new_var8 new_var15 new_var8 new_var21 new_var26)))
(assert (= new_var28 (str.in.re arnvar new_var27)))
(assert (= p0.0.condition (and arnvar_exists new_var25)))
(assert (= p1.0.condition (and arnvar_exists new_var28)))
(assert p0.0.condition)
(assert (not (and p1.0.condition p1.0.principal)))
(check-sat)
(get-model)
