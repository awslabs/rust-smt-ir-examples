(declare-const actionName String)
(declare-const actionNamespace String)
(declare-const |aws:referer| String)
(declare-const |aws:referer_exists| Bool)
(declare-const resource_account String)
(declare-const resource_partition String)
(declare-const resource_prefix String)
(declare-const resource_region String)
(declare-const resource_resource String)
(declare-const resource_service String)

; Action: p0.0
(declare-const p0.0.action Bool)
(assert (= p0.0.action (and (= "s3" actionNamespace) (= "getobject" actionName))))

; Condition: p0.0
(declare-const p0.0.condition Bool)
(assert (= p0.0.condition (and |aws:referer_exists| (str.suffixof "baz" |aws:referer|))))

; Resource: p0.0
(declare-const p0.0.resource Bool)
(assert (= p0.0.resource (and (= "arn" resource_prefix) (= "aws" resource_partition) (= "s3" resource_service) (= "" resource_region) (= "" resource_account) (str.prefixof "examplebucket/" resource_resource))))

; Statement: p0.0
(declare-const p0.0.statement.allow Bool)
(assert (= p0.0.statement.allow (and p0.0.action p0.0.condition p0.0.resource)))

; Policy: 0
(declare-const p0.denies Bool)
(assert (not p0.denies))
(declare-const p0.allows Bool)
(assert (= p0.allows p0.0.statement.allow))
(declare-const p0.neutral Bool)
(assert (= p0.neutral (not p0.0.statement.allow)))

; Action: p1.0
(declare-const p1.0.action Bool)
(assert (= p1.0.action (and (= "s3" actionNamespace) (= "getobject" actionName))))

; Condition: p1.0
(declare-const p1.0.condition Bool)
(assert (= p1.0.condition (and |aws:referer_exists| (str.prefixof "http://www.example1.com/" |aws:referer|))))

; Resource: p1.0
(declare-const p1.0.resource Bool)
(assert (= p1.0.resource (and (= "arn" resource_prefix) (= "aws" resource_partition) (= "s3" resource_service) (= "" resource_region) (= "" resource_account) (str.prefixof "examplebucket/" resource_resource))))

; Statement: p1.0
(declare-const p1.0.statement.allow Bool)
(assert (= p1.0.statement.allow (and p1.0.action p1.0.condition p1.0.resource)))

; Policy: 1
(declare-const p1.denies Bool)
(assert (not p1.denies))
(declare-const p1.allows Bool)
(assert (= p1.allows p1.0.statement.allow))
(declare-const p1.neutral Bool)
(assert (= p1.neutral (not p1.0.statement.allow)))

; resource prefix invariant
(assert (= "arn" resource_prefix))

; resource partition and region invariant
(assert (or (and (= "aws" resource_partition) (= "ap-east-1" resource_region)) (and (= "aws" resource_partition) (= "" resource_region)) (and (= "aws" resource_partition) (= "ap-northeast-1" resource_region)) (and (= "aws" resource_partition) (= "ap-northeast-2" resource_region)) (and (= "aws" resource_partition) (= "ap-northeast-3" resource_region)) (and (= "aws" resource_partition) (= "ap-south-1" resource_region)) (and (= "aws" resource_partition) (= "ap-southeast-1" resource_region)) (and (= "aws" resource_partition) (= "ap-southeast-2" resource_region)) (and (= "aws" resource_partition) (= "ca-central-1" resource_region)) (and (= "aws" resource_partition) (= "eu-central-1" resource_region)) (and (= "aws" resource_partition) (= "eu-north-1" resource_region)) (and (= "aws" resource_partition) (= "eu-west-1" resource_region)) (and (= "aws" resource_partition) (= "eu-west-2" resource_region)) (and (= "aws" resource_partition) (= "eu-west-3" resource_region)) (and (= "aws" resource_partition) (= "me-south-1" resource_region)) (and (= "aws" resource_partition) (= "sa-east-1" resource_region)) (and (= "aws" resource_partition) (= "us-east-1" resource_region)) (and (= "aws" resource_partition) (= "us-east-2" resource_region)) (and (= "aws" resource_partition) (= "us-west-1" resource_region)) (and (= "aws" resource_partition) (= "us-west-2" resource_region))))

; resource service invariant
(assert (str.in.re resource_service (re.* (re.union (re.range "a" "z") (re.range "0" "9") (str.to.re "-")))))

; resource account invariant
(assert (str.in.re resource_account (re.union (str.to.re "") (re.loop (re.range "0" "9") 12 12) (str.to.re "aws") (str.to.re "cloudfront"))))

; resource only IAM ARNs can have non-numeric account fields invariant
(assert (=> (str.in.re resource_account (re.union (str.to.re "aws") (str.to.re "cloudfront"))) (= resource_service "iam")))

; Goals
(assert p0.allows)
(assert (not p1.allows))

(check-sat)
(get-model)