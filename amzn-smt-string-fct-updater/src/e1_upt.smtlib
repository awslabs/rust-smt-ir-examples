(set-logic ALL)
(declare-const actionName String)
(declare-const actionNamespace String)
(declare-const |aws:referer| String)
(declare-const |aws:referer_exists| Bool)
(declare-const resource_account String)
(declare-const resource_partition String)
(declare-const resource_prefix String)
(declare-const resource_region String)
(declare-const resource_resource String)
(declare-const resource_service String)
(declare-const p0-s0.0.action Bool)
(assert (= p0-s0.0.action (and (= "s3" actionNamespace) (= "getobject" actionName))))
(declare-const p0-s0.0.condition Bool)
(assert (= p0-s0.0.condition (and |aws:referer_exists| (str.prefixof "http://www.example1.com/" |aws:referer|) (str.suffixof "baz" |aws:referer|))))
(declare-const p0-s0.0.resource Bool)
(assert (= p0-s0.0.resource (and (= "arn" resource_prefix) (= "aws" resource_partition) (= "s3" resource_service) (= "" resource_region) (= "" resource_account) (str.prefixof "examplebucket/" resource_resource))))
(declare-const p0-s0.0.statement.allow Bool)
(assert (= p0-s0.0.statement.allow (and p0-s0.0.action p0-s0.0.condition p0-s0.0.resource)))
(declare-const p0-s0.denies Bool)
(assert (not p0-s0.denies))
(declare-const p0-s0.allows Bool)
(assert (= p0-s0.allows p0-s0.0.statement.allow))
(declare-const p0-s0.neutral Bool)
(assert (= p0-s0.neutral (not p0-s0.0.statement.allow)))
(declare-const s0.final.deny Bool)
(assert (not s0.final.deny))
(declare-const s0.final.allow Bool)
(assert (= s0.final.allow p0-s0.0.statement.allow))
(declare-const s0.final.neutral Bool)
(assert (= s0.final.neutral (not p0-s0.0.statement.allow)))
(declare-const p0-s1.0.action Bool)
(assert (= p0-s1.0.action (and (= "s3" actionNamespace) (= "getobject" actionName))))
(declare-const p0-s1.0.condition Bool)
(assert (= p0-s1.0.condition (and |aws:referer_exists| (str.prefixof "http://www.example1.com/" |aws:referer|) (str.contains |aws:referer| "foobar") (str.suffixof "baz" |aws:referer|))))
(declare-const p0-s1.0.resource Bool)
(assert (= p0-s1.0.resource (and (= "arn" resource_prefix) (= "aws" resource_partition) (= "s3" resource_service) (= "" resource_region) (= "" resource_account) (str.prefixof "examplebucket/" resource_resource))))
(declare-const p0-s1.0.statement.allow Bool)
(assert (= p0-s1.0.statement.allow (and p0-s1.0.action p0-s1.0.condition p0-s1.0.resource)))
(declare-const p0-s1.denies Bool)
(assert (not p0-s1.denies))
(declare-const p0-s1.allows Bool)
(assert (= p0-s1.allows p0-s1.0.statement.allow))
(declare-const p0-s1.neutral Bool)
(assert (= p0-s1.neutral (not p0-s1.0.statement.allow)))
(declare-const s1.final.deny Bool)
(assert (not s1.final.deny))
(declare-const s1.final.allow Bool)
(assert (= s1.final.allow p0-s1.0.statement.allow))
(declare-const s1.final.neutral Bool)
(assert (= s1.final.neutral (not p0-s1.0.statement.allow)))
(assert (=> (= actionNamespace "sts") (or (= resource_service "sts") (= resource_service "iam"))))
(assert (=> (= actionNamespace "iam") (or (= resource_service "sts") (= resource_service "iam"))))
(assert (= (= resource_service "sns") (= actionNamespace "sns")))
(assert (= (= resource_service "s3") (= actionNamespace "s3")))
(assert (= (= resource_service "lambda") (= actionNamespace "lambda")))
(assert (=> (= resource_service "sts") (or (= actionNamespace "iam") (= actionNamespace "sts"))))
(assert (= (= resource_service "sqs") (= actionNamespace "sqs")))
(assert (=> (= resource_service "iam") (or (= actionNamespace "iam") (= actionNamespace "sts"))))
(assert (= (= resource_service "glacier") (= actionNamespace "glacier")))
(assert (= (= resource_service "kms") (= actionNamespace "kms")))
(assert (= (= resource_service "es") (= actionNamespace "es")))
(assert (= "arn" resource_prefix))
(assert (or (and (= "aws" resource_partition) (= "af-south-1" resource_region)) (and (= "aws" resource_partition) (= "" resource_region)) (and (= "aws" resource_partition) (= "ap-east-1" resource_region)) (and (= "aws" resource_partition) (= "ap-northeast-1" resource_region)) (and (= "aws" resource_partition) (= "ap-northeast-2" resource_region)) (and (= "aws" resource_partition) (= "ap-northeast-3" resource_region)) (and (= "aws" resource_partition) (= "ap-south-1" resource_region)) (and (= "aws" resource_partition) (= "ap-southeast-1" resource_region)) (and (= "aws" resource_partition) (= "ap-southeast-2" resource_region)) (and (= "aws" resource_partition) (= "ca-central-1" resource_region)) (and (= "aws" resource_partition) (= "eu-central-1" resource_region)) (and (= "aws" resource_partition) (= "eu-north-1" resource_region)) (and (= "aws" resource_partition) (= "eu-south-1" resource_region)) (and (= "aws" resource_partition) (= "eu-west-1" resource_region)) (and (= "aws" resource_partition) (= "eu-west-2" resource_region)) (and (= "aws" resource_partition) (= "eu-west-3" resource_region)) (and (= "aws" resource_partition) (= "me-south-1" resource_region)) (and (= "aws" resource_partition) (= "sa-east-1" resource_region)) (and (= "aws" resource_partition) (= "us-east-1" resource_region)) (and (= "aws" resource_partition) (= "us-east-2" resource_region)) (and (= "aws" resource_partition) (= "us-west-1" resource_region)) (and (= "aws" resource_partition) (= "us-west-2" resource_region))))
(assert (str.in_re resource_service (re.* (re.union (re.range "a" "z") (re.range "0" "9") (str.to_re "-")))))
(assert (str.in_re resource_account (re.union (str.to_re "") ((_ re.loop 12 12) (re.range "0" "9")))))
(assert s0.final.allow)
(assert (not s1.final.allow))
(check-sat)
(get-model)